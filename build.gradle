plugins {
    id 'java'
    id 'io.quarkus'
    id 'application'
}

repositories {
    mavenCentral()
    mavenLocal()
}
 

dependencies {
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-arc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

    // Para JSON
    implementation("io.quarkus:quarkus-rest-jsonb")
    implementation 'org.json:json:20240303'


    testImplementation("io.quarkus:quarkus-junit5")

}

group = 'py.com'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}



compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}


quarkus {
    // Versión nueva (recomendada):
    // outputDirectory = layout.buildDirectory.dir('quarkus-app').get().asFile
}




tasks.register('copyConfig', Copy) {
    from 'src/main/resources'
    include 'application.properties', 'sifen.properties'
    into layout.buildDirectory.dir("quarkus-app/config").get().asFile
}
//build.dependsOn 'copyConfig'
// Asegurar que se ejecute después de la tarea build
tasks.named('build') {
    finalizedBy 'copyConfig'
}


tasks.register('runMain', JavaExec) {
    description = 'Ejecuta cualquier clase main pasando el nombre como parámetro.'
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('mainClassName')) {
        mainClass.set(project.property('mainClassName'))
    } else {
        logger.lifecycle("Usa -PmainClassName=paquete.Clase para indicar la clase a ejecutar")
    }
}


