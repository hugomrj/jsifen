plugins {
    id 'java'
    id 'io.quarkus'
    id 'application'   // permite usar gradlew run
}

repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-arc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

    // Para JSON
    implementation 'com.google.code.gson:gson:2.10.1' // Gson
    implementation 'org.json:json:20230227' // JSON-javaen

}

group = 'py.com'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}


quarkus {
    // outputName = "jsifen-1.0.0-SNAPSHOT-runner"
}




tasks.register('runMain', JavaExec) {
    description = 'Ejecuta cualquier clase main pasando el nombre como parámetro.'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('mainClassName')) {
        mainClass = project.property('mainClassName')
    }
}


tasks.register('runTest', JavaExec) {
    description = 'Ejecuta una clase con un método main desde el classpath de test.'
    classpath = sourceSets.test.runtimeClasspath
    if (project.hasProperty('mainClassName')) {
        mainClass = project.property('mainClassName')
    }
}